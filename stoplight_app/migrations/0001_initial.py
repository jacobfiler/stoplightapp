# Generated by Django 5.0.7 on 2024-07-30 20:54

import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PolicySpecialist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='ReformArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='SourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Reform',
            fields=[
                ('slcid', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('criteria', models.TextField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('version', models.IntegerField(default=1)),
                ('reform_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reforms', to='stoplight_app.reformarea')),
            ],
        ),
        migrations.CreateModel(
            name='ReformStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, choices=[('R', 'Red'), ('Y', 'Yellow'), ('G', 'Green'), ('B', 'Blue'), ('K', 'Black'), ('N', 'Null')], default='N', max_length=1, null=True)),
                ('additional_notes', models.TextField(blank=True, null=True)),
                ('win', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('version', models.IntegerField(default=1)),
                ('citation', models.TextField(blank=True, null=True)),
                ('policy_specialist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='stoplight_app.policyspecialist')),
                ('reform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stoplight_app.reform')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stoplight_app.state')),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=500)),
                ('reform_status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='stoplight_app.reformstatus')),
                ('source_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stoplight_app.sourcetype')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalReformStatus',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('status', models.CharField(blank=True, choices=[('R', 'Red'), ('Y', 'Yellow'), ('G', 'Green'), ('B', 'Blue'), ('K', 'Black'), ('N', 'Null')], default='N', max_length=1, null=True)),
                ('additional_notes', models.TextField(blank=True, null=True)),
                ('win', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('version', models.IntegerField(default=1)),
                ('citation', models.TextField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('policy_specialist', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='stoplight_app.policyspecialist')),
                ('reform', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='stoplight_app.reform')),
                ('state', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='stoplight_app.state')),
            ],
            options={
                'verbose_name': 'historical reform status',
                'verbose_name_plural': 'historical reform statuss',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
